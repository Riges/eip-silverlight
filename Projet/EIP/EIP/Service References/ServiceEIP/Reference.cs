//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace EIP.ServiceEIP {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/EIPLibrary")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EIP.ServiceEIP.AccountFacebook))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EIP.ServiceEIP.AccountTwitter))]
    public partial class Account : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long accountIDField;
        
        private long groupIDField;
        
        private string nameField;
        
        private EIP.ServiceEIP.Account.TypeAccount typeAccountField;
        
        private long userIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long accountID {
            get {
                return this.accountIDField;
            }
            set {
                if ((this.accountIDField.Equals(value) != true)) {
                    this.accountIDField = value;
                    this.RaisePropertyChanged("accountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long groupID {
            get {
                return this.groupIDField;
            }
            set {
                if ((this.groupIDField.Equals(value) != true)) {
                    this.groupIDField = value;
                    this.RaisePropertyChanged("groupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EIP.ServiceEIP.Account.TypeAccount typeAccount {
            get {
                return this.typeAccountField;
            }
            set {
                if ((this.typeAccountField.Equals(value) != true)) {
                    this.typeAccountField = value;
                    this.RaisePropertyChanged("typeAccount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long userID {
            get {
                return this.userIDField;
            }
            set {
                if ((this.userIDField.Equals(value) != true)) {
                    this.userIDField = value;
                    this.RaisePropertyChanged("userID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Account.TypeAccount", Namespace="http://schemas.datacontract.org/2004/07/EIPLibrary")]
        public enum TypeAccount : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Facebook = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Twitter = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Myspace = 2,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountFacebook", Namespace="http://schemas.datacontract.org/2004/07/EIPLibrary")]
    public partial class AccountFacebook : EIP.ServiceEIP.Account {
        
        private bool sessionExpiresField;
        
        private string sessionKeyField;
        
        private string sessionSecretField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool sessionExpires {
            get {
                return this.sessionExpiresField;
            }
            set {
                if ((this.sessionExpiresField.Equals(value) != true)) {
                    this.sessionExpiresField = value;
                    this.RaisePropertyChanged("sessionExpires");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sessionKey {
            get {
                return this.sessionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.sessionKeyField, value) != true)) {
                    this.sessionKeyField = value;
                    this.RaisePropertyChanged("sessionKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sessionSecret {
            get {
                return this.sessionSecretField;
            }
            set {
                if ((object.ReferenceEquals(this.sessionSecretField, value) != true)) {
                    this.sessionSecretField = value;
                    this.RaisePropertyChanged("sessionSecret");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountTwitter", Namespace="http://schemas.datacontract.org/2004/07/EIPLibrary")]
    public partial class AccountTwitter : EIP.ServiceEIP.Account {
        
        private string pinField;
        
        private string tokenField;
        
        private string tokenSecretField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string pin {
            get {
                return this.pinField;
            }
            set {
                if ((object.ReferenceEquals(this.pinField, value) != true)) {
                    this.pinField = value;
                    this.RaisePropertyChanged("pin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string token {
            get {
                return this.tokenField;
            }
            set {
                if ((object.ReferenceEquals(this.tokenField, value) != true)) {
                    this.tokenField = value;
                    this.RaisePropertyChanged("token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tokenSecret {
            get {
                return this.tokenSecretField;
            }
            set {
                if ((object.ReferenceEquals(this.tokenSecretField, value) != true)) {
                    this.tokenSecretField = value;
                    this.RaisePropertyChanged("tokenSecret");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceEIP.IServiceEIP")]
    public interface IServiceEIP {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/IsUp", ReplyAction="http://tempuri.org/IServiceEIP/IsUpResponse")]
        System.IAsyncResult BeginIsUp(System.AsyncCallback callback, object asyncState);
        
        bool EndIsUp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/test", ReplyAction="http://tempuri.org/IServiceEIP/testResponse")]
        System.IAsyncResult Begintest(EIP.ServiceEIP.Account newAccount, System.AsyncCallback callback, object asyncState);
        
        bool Endtest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/GetAccountByUserID", ReplyAction="http://tempuri.org/IServiceEIP/GetAccountByUserIDResponse")]
        System.IAsyncResult BeginGetAccountByUserID(long userID, System.AsyncCallback callback, object asyncState);
        
        EIP.ServiceEIP.Account EndGetAccountByUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/GetAccountsByUserID", ReplyAction="http://tempuri.org/IServiceEIP/GetAccountsByUserIDResponse")]
        System.IAsyncResult BeginGetAccountsByUserID(long userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EIP.ServiceEIP.Account> EndGetAccountsByUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/GetAccountsByGroupID", ReplyAction="http://tempuri.org/IServiceEIP/GetAccountsByGroupIDResponse")]
        System.IAsyncResult BeginGetAccountsByGroupID(long groupID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EIP.ServiceEIP.Account> EndGetAccountsByGroupID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/GetAccountsByTwitter", ReplyAction="http://tempuri.org/IServiceEIP/GetAccountsByTwitterResponse")]
        System.IAsyncResult BeginGetAccountsByTwitter(string pseudo, string password, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EIP.ServiceEIP.Account> EndGetAccountsByTwitter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/AddAccount", ReplyAction="http://tempuri.org/IServiceEIP/AddAccountResponse")]
        System.IAsyncResult BeginAddAccount(EIP.ServiceEIP.Account newAccount, System.AsyncCallback callback, object asyncState);
        
        bool EndAddAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/SaveAccount", ReplyAction="http://tempuri.org/IServiceEIP/SaveAccountResponse")]
        System.IAsyncResult BeginSaveAccount(EIP.ServiceEIP.Account accountToSave, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/testfb", ReplyAction="http://tempuri.org/IServiceEIP/testfbResponse")]
        System.IAsyncResult Begintestfb(System.AsyncCallback callback, object asyncState);
        
        EIP.ServiceEIP.AccountFacebook Endtestfb(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceEIP/testT", ReplyAction="http://tempuri.org/IServiceEIP/testTResponse")]
        System.IAsyncResult BegintestT(System.AsyncCallback callback, object asyncState);
        
        EIP.ServiceEIP.AccountTwitter EndtestT(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceEIPChannel : EIP.ServiceEIP.IServiceEIP, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class testCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public testCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EIP.ServiceEIP.Account Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EIP.ServiceEIP.Account)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EIP.ServiceEIP.Account> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EIP.ServiceEIP.Account>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsByGroupIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsByGroupIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EIP.ServiceEIP.Account> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EIP.ServiceEIP.Account>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsByTwitterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsByTwitterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EIP.ServiceEIP.Account> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EIP.ServiceEIP.Account>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class testfbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public testfbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EIP.ServiceEIP.AccountFacebook Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EIP.ServiceEIP.AccountFacebook)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class testTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public testTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EIP.ServiceEIP.AccountTwitter Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EIP.ServiceEIP.AccountTwitter)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceEIPClient : System.ServiceModel.ClientBase<EIP.ServiceEIP.IServiceEIP>, EIP.ServiceEIP.IServiceEIP {
        
        private BeginOperationDelegate onBeginIsUpDelegate;
        
        private EndOperationDelegate onEndIsUpDelegate;
        
        private System.Threading.SendOrPostCallback onIsUpCompletedDelegate;
        
        private BeginOperationDelegate onBegintestDelegate;
        
        private EndOperationDelegate onEndtestDelegate;
        
        private System.Threading.SendOrPostCallback ontestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountByUserIDDelegate;
        
        private EndOperationDelegate onEndGetAccountByUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountByUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsByUserIDDelegate;
        
        private EndOperationDelegate onEndGetAccountsByUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsByUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsByGroupIDDelegate;
        
        private EndOperationDelegate onEndGetAccountsByGroupIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsByGroupIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsByTwitterDelegate;
        
        private EndOperationDelegate onEndGetAccountsByTwitterDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsByTwitterCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAccountDelegate;
        
        private EndOperationDelegate onEndAddAccountDelegate;
        
        private System.Threading.SendOrPostCallback onAddAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveAccountDelegate;
        
        private EndOperationDelegate onEndSaveAccountDelegate;
        
        private System.Threading.SendOrPostCallback onSaveAccountCompletedDelegate;
        
        private BeginOperationDelegate onBegintestfbDelegate;
        
        private EndOperationDelegate onEndtestfbDelegate;
        
        private System.Threading.SendOrPostCallback ontestfbCompletedDelegate;
        
        private BeginOperationDelegate onBegintestTDelegate;
        
        private EndOperationDelegate onEndtestTDelegate;
        
        private System.Threading.SendOrPostCallback ontestTCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceEIPClient() {
        }
        
        public ServiceEIPClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceEIPClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceEIPClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceEIPClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<IsUpCompletedEventArgs> IsUpCompleted;
        
        public event System.EventHandler<testCompletedEventArgs> testCompleted;
        
        public event System.EventHandler<GetAccountByUserIDCompletedEventArgs> GetAccountByUserIDCompleted;
        
        public event System.EventHandler<GetAccountsByUserIDCompletedEventArgs> GetAccountsByUserIDCompleted;
        
        public event System.EventHandler<GetAccountsByGroupIDCompletedEventArgs> GetAccountsByGroupIDCompleted;
        
        public event System.EventHandler<GetAccountsByTwitterCompletedEventArgs> GetAccountsByTwitterCompleted;
        
        public event System.EventHandler<AddAccountCompletedEventArgs> AddAccountCompleted;
        
        public event System.EventHandler<SaveAccountCompletedEventArgs> SaveAccountCompleted;
        
        public event System.EventHandler<testfbCompletedEventArgs> testfbCompleted;
        
        public event System.EventHandler<testTCompletedEventArgs> testTCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.BeginIsUp(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsUp(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool EIP.ServiceEIP.IServiceEIP.EndIsUp(System.IAsyncResult result) {
            return base.Channel.EndIsUp(result);
        }
        
        private System.IAsyncResult OnBeginIsUp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((EIP.ServiceEIP.IServiceEIP)(this)).BeginIsUp(callback, asyncState);
        }
        
        private object[] OnEndIsUp(System.IAsyncResult result) {
            bool retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).EndIsUp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsUpCompleted(object state) {
            if ((this.IsUpCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsUpCompleted(this, new IsUpCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsUpAsync() {
            this.IsUpAsync(null);
        }
        
        public void IsUpAsync(object userState) {
            if ((this.onBeginIsUpDelegate == null)) {
                this.onBeginIsUpDelegate = new BeginOperationDelegate(this.OnBeginIsUp);
            }
            if ((this.onEndIsUpDelegate == null)) {
                this.onEndIsUpDelegate = new EndOperationDelegate(this.OnEndIsUp);
            }
            if ((this.onIsUpCompletedDelegate == null)) {
                this.onIsUpCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsUpCompleted);
            }
            base.InvokeAsync(this.onBeginIsUpDelegate, null, this.onEndIsUpDelegate, this.onIsUpCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.Begintest(EIP.ServiceEIP.Account newAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begintest(newAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool EIP.ServiceEIP.IServiceEIP.Endtest(System.IAsyncResult result) {
            return base.Channel.Endtest(result);
        }
        
        private System.IAsyncResult OnBegintest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EIP.ServiceEIP.Account newAccount = ((EIP.ServiceEIP.Account)(inValues[0]));
            return ((EIP.ServiceEIP.IServiceEIP)(this)).Begintest(newAccount, callback, asyncState);
        }
        
        private object[] OnEndtest(System.IAsyncResult result) {
            bool retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).Endtest(result);
            return new object[] {
                    retVal};
        }
        
        private void OntestCompleted(object state) {
            if ((this.testCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.testCompleted(this, new testCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void testAsync(EIP.ServiceEIP.Account newAccount) {
            this.testAsync(newAccount, null);
        }
        
        public void testAsync(EIP.ServiceEIP.Account newAccount, object userState) {
            if ((this.onBegintestDelegate == null)) {
                this.onBegintestDelegate = new BeginOperationDelegate(this.OnBegintest);
            }
            if ((this.onEndtestDelegate == null)) {
                this.onEndtestDelegate = new EndOperationDelegate(this.OnEndtest);
            }
            if ((this.ontestCompletedDelegate == null)) {
                this.ontestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntestCompleted);
            }
            base.InvokeAsync(this.onBegintestDelegate, new object[] {
                        newAccount}, this.onEndtestDelegate, this.ontestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.BeginGetAccountByUserID(long userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountByUserID(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EIP.ServiceEIP.Account EIP.ServiceEIP.IServiceEIP.EndGetAccountByUserID(System.IAsyncResult result) {
            return base.Channel.EndGetAccountByUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountByUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long userID = ((long)(inValues[0]));
            return ((EIP.ServiceEIP.IServiceEIP)(this)).BeginGetAccountByUserID(userID, callback, asyncState);
        }
        
        private object[] OnEndGetAccountByUserID(System.IAsyncResult result) {
            EIP.ServiceEIP.Account retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).EndGetAccountByUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountByUserIDCompleted(object state) {
            if ((this.GetAccountByUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountByUserIDCompleted(this, new GetAccountByUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountByUserIDAsync(long userID) {
            this.GetAccountByUserIDAsync(userID, null);
        }
        
        public void GetAccountByUserIDAsync(long userID, object userState) {
            if ((this.onBeginGetAccountByUserIDDelegate == null)) {
                this.onBeginGetAccountByUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetAccountByUserID);
            }
            if ((this.onEndGetAccountByUserIDDelegate == null)) {
                this.onEndGetAccountByUserIDDelegate = new EndOperationDelegate(this.OnEndGetAccountByUserID);
            }
            if ((this.onGetAccountByUserIDCompletedDelegate == null)) {
                this.onGetAccountByUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountByUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountByUserIDDelegate, new object[] {
                        userID}, this.onEndGetAccountByUserIDDelegate, this.onGetAccountByUserIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.BeginGetAccountsByUserID(long userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsByUserID(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<EIP.ServiceEIP.Account> EIP.ServiceEIP.IServiceEIP.EndGetAccountsByUserID(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsByUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsByUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long userID = ((long)(inValues[0]));
            return ((EIP.ServiceEIP.IServiceEIP)(this)).BeginGetAccountsByUserID(userID, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsByUserID(System.IAsyncResult result) {
            System.Collections.Generic.List<EIP.ServiceEIP.Account> retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).EndGetAccountsByUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsByUserIDCompleted(object state) {
            if ((this.GetAccountsByUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsByUserIDCompleted(this, new GetAccountsByUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsByUserIDAsync(long userID) {
            this.GetAccountsByUserIDAsync(userID, null);
        }
        
        public void GetAccountsByUserIDAsync(long userID, object userState) {
            if ((this.onBeginGetAccountsByUserIDDelegate == null)) {
                this.onBeginGetAccountsByUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsByUserID);
            }
            if ((this.onEndGetAccountsByUserIDDelegate == null)) {
                this.onEndGetAccountsByUserIDDelegate = new EndOperationDelegate(this.OnEndGetAccountsByUserID);
            }
            if ((this.onGetAccountsByUserIDCompletedDelegate == null)) {
                this.onGetAccountsByUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsByUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsByUserIDDelegate, new object[] {
                        userID}, this.onEndGetAccountsByUserIDDelegate, this.onGetAccountsByUserIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.BeginGetAccountsByGroupID(long groupID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsByGroupID(groupID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<EIP.ServiceEIP.Account> EIP.ServiceEIP.IServiceEIP.EndGetAccountsByGroupID(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsByGroupID(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsByGroupID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long groupID = ((long)(inValues[0]));
            return ((EIP.ServiceEIP.IServiceEIP)(this)).BeginGetAccountsByGroupID(groupID, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsByGroupID(System.IAsyncResult result) {
            System.Collections.Generic.List<EIP.ServiceEIP.Account> retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).EndGetAccountsByGroupID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsByGroupIDCompleted(object state) {
            if ((this.GetAccountsByGroupIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsByGroupIDCompleted(this, new GetAccountsByGroupIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsByGroupIDAsync(long groupID) {
            this.GetAccountsByGroupIDAsync(groupID, null);
        }
        
        public void GetAccountsByGroupIDAsync(long groupID, object userState) {
            if ((this.onBeginGetAccountsByGroupIDDelegate == null)) {
                this.onBeginGetAccountsByGroupIDDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsByGroupID);
            }
            if ((this.onEndGetAccountsByGroupIDDelegate == null)) {
                this.onEndGetAccountsByGroupIDDelegate = new EndOperationDelegate(this.OnEndGetAccountsByGroupID);
            }
            if ((this.onGetAccountsByGroupIDCompletedDelegate == null)) {
                this.onGetAccountsByGroupIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsByGroupIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsByGroupIDDelegate, new object[] {
                        groupID}, this.onEndGetAccountsByGroupIDDelegate, this.onGetAccountsByGroupIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.BeginGetAccountsByTwitter(string pseudo, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsByTwitter(pseudo, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<EIP.ServiceEIP.Account> EIP.ServiceEIP.IServiceEIP.EndGetAccountsByTwitter(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsByTwitter(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsByTwitter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string pseudo = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((EIP.ServiceEIP.IServiceEIP)(this)).BeginGetAccountsByTwitter(pseudo, password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsByTwitter(System.IAsyncResult result) {
            System.Collections.Generic.List<EIP.ServiceEIP.Account> retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).EndGetAccountsByTwitter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsByTwitterCompleted(object state) {
            if ((this.GetAccountsByTwitterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsByTwitterCompleted(this, new GetAccountsByTwitterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsByTwitterAsync(string pseudo, string password) {
            this.GetAccountsByTwitterAsync(pseudo, password, null);
        }
        
        public void GetAccountsByTwitterAsync(string pseudo, string password, object userState) {
            if ((this.onBeginGetAccountsByTwitterDelegate == null)) {
                this.onBeginGetAccountsByTwitterDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsByTwitter);
            }
            if ((this.onEndGetAccountsByTwitterDelegate == null)) {
                this.onEndGetAccountsByTwitterDelegate = new EndOperationDelegate(this.OnEndGetAccountsByTwitter);
            }
            if ((this.onGetAccountsByTwitterCompletedDelegate == null)) {
                this.onGetAccountsByTwitterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsByTwitterCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsByTwitterDelegate, new object[] {
                        pseudo,
                        password}, this.onEndGetAccountsByTwitterDelegate, this.onGetAccountsByTwitterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.BeginAddAccount(EIP.ServiceEIP.Account newAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAccount(newAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool EIP.ServiceEIP.IServiceEIP.EndAddAccount(System.IAsyncResult result) {
            return base.Channel.EndAddAccount(result);
        }
        
        private System.IAsyncResult OnBeginAddAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EIP.ServiceEIP.Account newAccount = ((EIP.ServiceEIP.Account)(inValues[0]));
            return ((EIP.ServiceEIP.IServiceEIP)(this)).BeginAddAccount(newAccount, callback, asyncState);
        }
        
        private object[] OnEndAddAccount(System.IAsyncResult result) {
            bool retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).EndAddAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAccountCompleted(object state) {
            if ((this.AddAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAccountCompleted(this, new AddAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAccountAsync(EIP.ServiceEIP.Account newAccount) {
            this.AddAccountAsync(newAccount, null);
        }
        
        public void AddAccountAsync(EIP.ServiceEIP.Account newAccount, object userState) {
            if ((this.onBeginAddAccountDelegate == null)) {
                this.onBeginAddAccountDelegate = new BeginOperationDelegate(this.OnBeginAddAccount);
            }
            if ((this.onEndAddAccountDelegate == null)) {
                this.onEndAddAccountDelegate = new EndOperationDelegate(this.OnEndAddAccount);
            }
            if ((this.onAddAccountCompletedDelegate == null)) {
                this.onAddAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAccountCompleted);
            }
            base.InvokeAsync(this.onBeginAddAccountDelegate, new object[] {
                        newAccount}, this.onEndAddAccountDelegate, this.onAddAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.BeginSaveAccount(EIP.ServiceEIP.Account accountToSave, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveAccount(accountToSave, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool EIP.ServiceEIP.IServiceEIP.EndSaveAccount(System.IAsyncResult result) {
            return base.Channel.EndSaveAccount(result);
        }
        
        private System.IAsyncResult OnBeginSaveAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EIP.ServiceEIP.Account accountToSave = ((EIP.ServiceEIP.Account)(inValues[0]));
            return ((EIP.ServiceEIP.IServiceEIP)(this)).BeginSaveAccount(accountToSave, callback, asyncState);
        }
        
        private object[] OnEndSaveAccount(System.IAsyncResult result) {
            bool retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).EndSaveAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveAccountCompleted(object state) {
            if ((this.SaveAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveAccountCompleted(this, new SaveAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveAccountAsync(EIP.ServiceEIP.Account accountToSave) {
            this.SaveAccountAsync(accountToSave, null);
        }
        
        public void SaveAccountAsync(EIP.ServiceEIP.Account accountToSave, object userState) {
            if ((this.onBeginSaveAccountDelegate == null)) {
                this.onBeginSaveAccountDelegate = new BeginOperationDelegate(this.OnBeginSaveAccount);
            }
            if ((this.onEndSaveAccountDelegate == null)) {
                this.onEndSaveAccountDelegate = new EndOperationDelegate(this.OnEndSaveAccount);
            }
            if ((this.onSaveAccountCompletedDelegate == null)) {
                this.onSaveAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveAccountCompleted);
            }
            base.InvokeAsync(this.onBeginSaveAccountDelegate, new object[] {
                        accountToSave}, this.onEndSaveAccountDelegate, this.onSaveAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.Begintestfb(System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begintestfb(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EIP.ServiceEIP.AccountFacebook EIP.ServiceEIP.IServiceEIP.Endtestfb(System.IAsyncResult result) {
            return base.Channel.Endtestfb(result);
        }
        
        private System.IAsyncResult OnBegintestfb(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((EIP.ServiceEIP.IServiceEIP)(this)).Begintestfb(callback, asyncState);
        }
        
        private object[] OnEndtestfb(System.IAsyncResult result) {
            EIP.ServiceEIP.AccountFacebook retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).Endtestfb(result);
            return new object[] {
                    retVal};
        }
        
        private void OntestfbCompleted(object state) {
            if ((this.testfbCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.testfbCompleted(this, new testfbCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void testfbAsync() {
            this.testfbAsync(null);
        }
        
        public void testfbAsync(object userState) {
            if ((this.onBegintestfbDelegate == null)) {
                this.onBegintestfbDelegate = new BeginOperationDelegate(this.OnBegintestfb);
            }
            if ((this.onEndtestfbDelegate == null)) {
                this.onEndtestfbDelegate = new EndOperationDelegate(this.OnEndtestfb);
            }
            if ((this.ontestfbCompletedDelegate == null)) {
                this.ontestfbCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntestfbCompleted);
            }
            base.InvokeAsync(this.onBegintestfbDelegate, null, this.onEndtestfbDelegate, this.ontestfbCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EIP.ServiceEIP.IServiceEIP.BegintestT(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegintestT(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EIP.ServiceEIP.AccountTwitter EIP.ServiceEIP.IServiceEIP.EndtestT(System.IAsyncResult result) {
            return base.Channel.EndtestT(result);
        }
        
        private System.IAsyncResult OnBegintestT(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((EIP.ServiceEIP.IServiceEIP)(this)).BegintestT(callback, asyncState);
        }
        
        private object[] OnEndtestT(System.IAsyncResult result) {
            EIP.ServiceEIP.AccountTwitter retVal = ((EIP.ServiceEIP.IServiceEIP)(this)).EndtestT(result);
            return new object[] {
                    retVal};
        }
        
        private void OntestTCompleted(object state) {
            if ((this.testTCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.testTCompleted(this, new testTCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void testTAsync() {
            this.testTAsync(null);
        }
        
        public void testTAsync(object userState) {
            if ((this.onBegintestTDelegate == null)) {
                this.onBegintestTDelegate = new BeginOperationDelegate(this.OnBegintestT);
            }
            if ((this.onEndtestTDelegate == null)) {
                this.onEndtestTDelegate = new EndOperationDelegate(this.OnEndtestT);
            }
            if ((this.ontestTCompletedDelegate == null)) {
                this.ontestTCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntestTCompleted);
            }
            base.InvokeAsync(this.onBegintestTDelegate, null, this.onEndtestTDelegate, this.ontestTCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override EIP.ServiceEIP.IServiceEIP CreateChannel() {
            return new ServiceEIPClientChannel(this);
        }
        
        private class ServiceEIPClientChannel : ChannelBase<EIP.ServiceEIP.IServiceEIP>, EIP.ServiceEIP.IServiceEIP {
            
            public ServiceEIPClientChannel(System.ServiceModel.ClientBase<EIP.ServiceEIP.IServiceEIP> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginIsUp(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsUp", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsUp(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsUp", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begintest(EIP.ServiceEIP.Account newAccount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = newAccount;
                System.IAsyncResult _result = base.BeginInvoke("test", _args, callback, asyncState);
                return _result;
            }
            
            public bool Endtest(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("test", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccountByUserID(long userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetAccountByUserID", _args, callback, asyncState);
                return _result;
            }
            
            public EIP.ServiceEIP.Account EndGetAccountByUserID(System.IAsyncResult result) {
                object[] _args = new object[0];
                EIP.ServiceEIP.Account _result = ((EIP.ServiceEIP.Account)(base.EndInvoke("GetAccountByUserID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccountsByUserID(long userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetAccountsByUserID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<EIP.ServiceEIP.Account> EndGetAccountsByUserID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<EIP.ServiceEIP.Account> _result = ((System.Collections.Generic.List<EIP.ServiceEIP.Account>)(base.EndInvoke("GetAccountsByUserID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccountsByGroupID(long groupID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupID;
                System.IAsyncResult _result = base.BeginInvoke("GetAccountsByGroupID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<EIP.ServiceEIP.Account> EndGetAccountsByGroupID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<EIP.ServiceEIP.Account> _result = ((System.Collections.Generic.List<EIP.ServiceEIP.Account>)(base.EndInvoke("GetAccountsByGroupID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccountsByTwitter(string pseudo, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = pseudo;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("GetAccountsByTwitter", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<EIP.ServiceEIP.Account> EndGetAccountsByTwitter(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<EIP.ServiceEIP.Account> _result = ((System.Collections.Generic.List<EIP.ServiceEIP.Account>)(base.EndInvoke("GetAccountsByTwitter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddAccount(EIP.ServiceEIP.Account newAccount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = newAccount;
                System.IAsyncResult _result = base.BeginInvoke("AddAccount", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveAccount(EIP.ServiceEIP.Account accountToSave, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = accountToSave;
                System.IAsyncResult _result = base.BeginInvoke("SaveAccount", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSaveAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SaveAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begintestfb(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("testfb", _args, callback, asyncState);
                return _result;
            }
            
            public EIP.ServiceEIP.AccountFacebook Endtestfb(System.IAsyncResult result) {
                object[] _args = new object[0];
                EIP.ServiceEIP.AccountFacebook _result = ((EIP.ServiceEIP.AccountFacebook)(base.EndInvoke("testfb", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegintestT(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("testT", _args, callback, asyncState);
                return _result;
            }
            
            public EIP.ServiceEIP.AccountTwitter EndtestT(System.IAsyncResult result) {
                object[] _args = new object[0];
                EIP.ServiceEIP.AccountTwitter _result = ((EIP.ServiceEIP.AccountTwitter)(base.EndInvoke("testT", _args, result)));
                return _result;
            }
        }
    }
}
